{"version":3,"sources":["components/TeamForm.js","components/TableRow.js","components/ResultsTable.js","App.js","serviceWorker.js","index.js"],"names":["TeamForm","setTeam","setPageSize","className","Form","Label","Control","type","name","placeholder","onChange","e","target","value","as","TableRow","match","showGoals","goals","league","numberTeamsLeague","homeTeam","awayTeam","result","string","showResults","homeFinalGoals","awayFinalGoals","homeExtraGoals","awayExtraGoals","homeFirstHalfGoals","awayFirstHalfGoals","homeSecondHalfGoals","awaySecondHalfGoals","ResultsTable","matches","Table","striped","bordered","hover","Array","isArray","map","key","id","App","useState","setMatches","team","pageSize","currentPage","changeCurrentPage","totalCount","header","setHeader","searchMatches","pageNumber","a","url","axios","get","results","JSON","parse","headers","console","log","TotalCount","data","useEffect","activePage","CurrentPage","itemCountPerPage","PageSize","bind","this","itemClass","firstPageText","lastPageText","totalItemsCount","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e68bc34.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst TeamForm = ({ setTeam, setPageSize }) => {\r\n  const handleChangeTeam = (e) => {\r\n    setTeam(e.target.value);\r\n  };\r\n\r\n  const handleChangeSize = (e) => {\r\n    setPageSize(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='container-form'>\r\n      <h2 className='text-center'>Buscar partidos por equipo</h2>\r\n      <Form className='my-5'>\r\n        <Form.Label className='label-form'>Equipo</Form.Label>\r\n        <Form.Control\r\n          type='text'\r\n          name='team'\r\n          placeholder='Nombre del equipo'\r\n          onChange={handleChangeTeam}\r\n        />\r\n        <Form.Label className='mt-5 label-form'>\r\n          Número de resultados por página\r\n        </Form.Label>\r\n        <Form.Control\r\n          className='mb-4'\r\n          as='select'\r\n          name='pageSize'\r\n          onChange={handleChangeSize}\r\n        >\r\n          <option value='10'>10</option>\r\n          <option value='20'>20</option>\r\n          <option value='30'>30</option>\r\n        </Form.Control>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamForm;\r\n","import React from 'react';\r\n\r\nconst TableRow = ({ match }) => {\r\n  const showResults = (result) => {\r\n    let string;\r\n    switch (result) {\r\n      case 'AWAY':\r\n        string = 'Equipo visitante';\r\n        break;\r\n      case 'HOME':\r\n        string = 'Equipo local';\r\n        break;\r\n      case 'DRAW':\r\n        string = 'Empate';\r\n        break;\r\n      default:\r\n        string = 'Hubo un error';\r\n        break;\r\n    }\r\n\r\n    return string;\r\n  };\r\n\r\n  const showGoals = (goals) => {\r\n    if (goals === null) {\r\n      return 'No hay información / NC';\r\n    }\r\n\r\n    return goals;\r\n  };\r\n  return (\r\n    <tr>\r\n      <td>{match.league}</td>\r\n      <td>{match.numberTeamsLeague}</td>\r\n      <td>{match.homeTeam}</td>\r\n      <td>{match.awayTeam}</td>\r\n      <td>{showResults(match.result)}</td>\r\n      <td>{showGoals(match.homeFinalGoals)}</td>\r\n      <td>{showGoals(match.awayFinalGoals)}</td>\r\n      <td>{showGoals(match.homeExtraGoals)}</td>\r\n      <td>{showGoals(match.awayExtraGoals)}</td>\r\n      <td>{showGoals(match.homeFirstHalfGoals)}</td>\r\n      <td>{showGoals(match.awayFirstHalfGoals)}</td>\r\n      <td>{showGoals(match.homeSecondHalfGoals)}</td>\r\n      <td>{showGoals(match.awaySecondHalfGoals)}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport TableRow from './TableRow';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst ResultsTable = ({ matches }) => {\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Liga</th>\r\n          <th>Cantidad de equipos</th>\r\n          <th>Equipo local</th>\r\n          <th>Equipo visitante</th>\r\n          <th>Resultados</th>\r\n          <th>Goles del local</th>\r\n          <th>Goles del vistante</th>\r\n          <th>Goles del local - TE</th>\r\n          <th>Goles del visitante - TE</th>\r\n          <th>Goles del local - 1</th>\r\n          <th>Goles del visitante - 1</th>\r\n          <th>Goles del local - 2</th>\r\n          <th>Goles del visitante - 2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Array.isArray(matches)\r\n          ? matches.map((match) => <TableRow key={match.id} match={match} />)\r\n          : null}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default ResultsTable;\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport TeamForm from './components/TeamForm';\nimport ResutsTable from './components/ResultsTable';\nimport Pagination from 'react-js-pagination';\n\nfunction App() {\n  const [matches, setMatches] = useState([]);\n  const [team, setTeam] = useState('');\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, changeCurrentPage] = useState(1);\n  const [header, setHeader] = useState({\n    totalCount: 0,\n  });\n\n  const searchMatches = async (pageNumber) => {\n    const url = `https://soccermatchesapi-apim.azure-api.net/matches/api/Matches/search?team=${team}&pageSize=${pageSize}&pageNumber=${pageNumber}`;\n    const results = await axios.get(url);\n    setHeader(JSON.parse(results.headers['x-pagination']));\n    console.log(JSON.parse(results.headers['x-pagination']).TotalCount);\n    setMatches(results.data);\n    console.log(matches);\n  };\n\n  const handlePaginationChange = (pageNumber) => {\n    searchMatches(pageNumber);\n    changeCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    //clienteAxios.get().then((result) => console.log(result));\n    searchMatches(currentPage);\n    //console.log(matches);\n  }, [team, pageSize]);\n\n  return (\n    <div>\n      <TeamForm setTeam={setTeam} setPageSize={setPageSize} />\n      <ResutsTable matches={matches} />\n      <div className='paging'>\n        <Pagination\n          activePage={header.CurrentPage}\n          itemCountPerPage={header.PageSize}\n          onChange={handlePaginationChange.bind(this)}\n          itemClass='page-item page-link'\n          firstPageText='Primero'\n          lastPageText='Último'\n          totalItemsCount={header.TotalCount ? header.TotalCount : 1}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}